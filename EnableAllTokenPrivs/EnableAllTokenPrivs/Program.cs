/*
    Credits: https://github.com/fashionproof -> https://github.com/fashionproof/EnableAllTokenPrivs/blob/master/EnableAllTokenPrivs.ps1

    This file is part of EnableAllTokenPrivs.

    EnableAllTokenPrivs is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EnableAllTokenPrivs is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
*/

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace EnableAllTokenPrivs
{
    class Program
    {
        [DllImport("advapi32.dll", ExactSpelling = true, SetLastError = true)]
        internal static extern bool AdjustTokenPrivileges(IntPtr htok, bool disall,
        ref TokPriv1Luid newst, int len, IntPtr prev, IntPtr relen);
        [DllImport("advapi32.dll", ExactSpelling = true, SetLastError = true)]
        internal static extern bool OpenProcessToken(IntPtr h, int acc, ref IntPtr phtok);
        [DllImport("advapi32.dll", SetLastError = true)]
        internal static extern bool LookupPrivilegeValue(string host, string name, ref long pluid);
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        internal struct TokPriv1Luid
        {
            public int Count;
            public long Luid;
            public int Attr;
        }
        internal const int SE_PRIVILEGE_ENABLED = 0x00000002;
        internal const int SE_PRIVILEGE_DISABLED = 0x00000000;
        internal const int TOKEN_QUERY = 0x00000008;
        internal const int TOKEN_ADJUST_PRIVILEGES = 0x00000020;

        static void Main(string[] args)
        {
            if (args.Length < 1)
            {
                Console.WriteLine("Usage: exe <PID to enable privs on>");
                Environment.Exit(0);
            }

            int pid = int.Parse(args[0]);

            try
            {
                bool retVal;
                TokPriv1Luid tp;
                IntPtr hproc = new IntPtr();
                hproc = Process.GetProcessById(pid).Handle;
                IntPtr htok = IntPtr.Zero;

                List<string> privs = new List<string>() {  
                    "SeAssignPrimaryTokenPrivilege", 
                    "SeAuditPrivilege", 
                    "SeBackupPrivilege",
                    "SeChangeNotifyPrivilege", 
                    "SeCreateGlobalPrivilege", 
                    "SeCreatePagefilePrivilege",
                    "SeCreatePermanentPrivilege", 
                    "SeCreateSymbolicLinkPrivilege", 
                    "SeCreateTokenPrivilege",
                    "SeDebugPrivilege", 
                    "SeEnableDelegationPrivilege", 
                    "SeImpersonatePrivilege", 
                    "SeIncreaseBasePriorityPrivilege",
                    "SeIncreaseQuotaPrivilege", 
                    "SeIncreaseWorkingSetPrivilege", 
                    "SeLoadDriverPrivilege",
                    "SeLockMemoryPrivilege", 
                    "SeMachineAccountPrivilege", 
                    "SeManageVolumePrivilege",
                    "SeProfileSingleProcessPrivilege", 
                    "SeRelabelPrivilege", 
                    "SeRemoteShutdownPrivilege",
                    "SeRestorePrivilege", 
                    "SeSecurityPrivilege", 
                    "SeShutdownPrivilege", 
                    "SeSyncAgentPrivilege",
                    "SeSystemEnvironmentPrivilege", 
                    "SeSystemProfilePrivilege", 
                    "SeSystemtimePrivilege",
                    "SeTakeOwnershipPrivilege", 
                    "SeTcbPrivilege", 
                    "SeTimeZonePrivilege", 
                    "SeTrustedCredManAccessPrivilege",
                    "SeUndockPrivilege", 
                    "SeUnsolicitedInputPrivilege", 
                    "SeDelegateSessionUserImpersonatePrivilege" };

                retVal = OpenProcessToken(hproc, TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, ref htok);
                Console.WriteLine("[+] Interacting with PID <{0}>", pid);
                tp.Count = 1;
                tp.Luid = 0;
                tp.Attr = SE_PRIVILEGE_ENABLED;

                Console.WriteLine("[+] Enabling Tokens");
                foreach (var priv in privs)
                {
                   
                    retVal = LookupPrivilegeValue(null, priv, ref tp.Luid);
                    retVal = AdjustTokenPrivileges(htok, false, ref tp, 0, IntPtr.Zero, IntPtr.Zero);
                }
                Console.WriteLine("[+] Tokens Enabling Done");
            }
            catch(Exception e)
            {
                Console.WriteLine(e.ToString());
                Environment.Exit(0);
            }
        }
    }
}
