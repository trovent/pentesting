using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace PrivUtils
{
    public class Tool
    {
        [DllImport("advapi32.dll", ExactSpelling = true, SetLastError = true)]
        internal static extern bool AdjustTokenPrivileges(IntPtr htok, bool disall,
         ref TokPriv1Luid newst, int len, IntPtr prev, IntPtr relen);
        [DllImport("advapi32.dll", ExactSpelling = true, SetLastError = true)]
        internal static extern bool OpenProcessToken(IntPtr h, int acc, ref IntPtr phtok);
        [DllImport("advapi32.dll", SetLastError = true)]
        internal static extern bool LookupPrivilegeValue(string host, string name, ref long pluid);
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        internal struct TokPriv1Luid
        {
            public int Count;
            public long Luid;
            public int Attr;
        }
        internal const int SE_PRIVILEGE_ENABLED = 0x00000002;
        internal const int SE_PRIVILEGE_DISABLED = 0x00000000;
        internal const int TOKEN_QUERY = 0x00000008;
        internal const int TOKEN_ADJUST_PRIVILEGES = 0x00000020;

        enum TOKEN_INFORMATION_CLASS
        {
            TokenUser = 1,
            TokenGroups,
            TokenPrivileges,
            TokenOwner,
            TokenPrimaryGroup,
            TokenDefaultDacl,
            TokenSource,
            TokenType,
            TokenImpersonationLevel,
            TokenStatistics,
            TokenRestrictedSids,
            TokenSessionId,
            TokenGroupsAndPrivileges,
            TokenSessionReference,
            TokenSandBoxInert,
            TokenAuditPolicy,
            TokenOrigin,
            TokenElevationType,
            TokenLinkedToken,
            TokenElevation,
            TokenHasRestrictions,
            TokenAccessInformation,
            TokenVirtualizationAllowed,
            TokenVirtualizationEnabled,
            TokenIntegrityLevel,
            TokenUIAccess,
            TokenMandatoryPolicy,
            TokenLogonSid,
            MaxTokenInfoClass
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct TOKEN_PRIVILEGES
        {
            public int PrivilegeCount;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 1)]
            public LUID_AND_ATTRIBUTES[] Privileges;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct LUID_AND_ATTRIBUTES
        {
            public LUID Luid;
            public UInt32 Attributes;

            public const UInt32 SE_PRIVILEGE_ENABLED_BY_DEFAULT = 0x00000001;
            public const UInt32 SE_PRIVILEGE_ENABLED = 0x00000002;
            public const UInt32 SE_PRIVILEGE_REMOVED = 0x00000004;
            public const UInt32 SE_PRIVILEGE_USED_FOR_ACCESS = 0x80000000;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct LUID
        {
            public uint LowPart;
            public uint HighPart;
        }

        [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        [return: MarshalAs(UnmanagedType.Bool)]
        protected static extern bool LookupPrivilegeName(string lpSystemName, IntPtr lpLuid, System.Text.StringBuilder lpName, ref int cchName);

        [DllImport("advapi32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        static extern bool OpenProcessToken(IntPtr ProcessHandle, UInt32 DesiredAccess, ref IntPtr TokenHandle);
       
        [DllImport("advapi32.dll", SetLastError = true)]
        static extern bool GetTokenInformation(
                IntPtr TokenHandle,
                TOKEN_INFORMATION_CLASS TokenInformationClass,
                IntPtr TokenInformation,
                int TokenInformationLength,
                out int ReturnLength);

        [StructLayout(LayoutKind.Sequential)]
        public struct PRIVILEGE_SET
        {
            public uint Control;
            public uint PrivilegeCount;

            public static uint PRIVILEGE_SET_ALL_NECESSARY = 1;
            
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 1)]
            public LUID_AND_ATTRIBUTES[] Privilege;

        }

        [DllImport("advapi32.dll", SetLastError = true)]
        public static extern bool PrivilegeCheck(
         IntPtr ClientToken,
         ref PRIVILEGE_SET RequiredPrivileges,
         out bool pfResult
        );

        [DllImport("kernel32.dll", ExactSpelling = true)]
        internal static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll")]
        static extern uint GetLastError();

        public static IntPtr getProcessToken(int pid)
        {
            IntPtr token = IntPtr.Zero;
            if (!OpenProcessToken(Process.GetProcessById(pid).Handle, TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, ref token))
            {
                throw new Exception("OpenProcessToken");
            }

            return token;
        }

        public static bool enablePriv(int pid, string privName)
        {
            bool retVal;
            TokPriv1Luid tp;
            IntPtr hproc = new IntPtr();
            hproc = Process.GetProcessById(pid).Handle;
            IntPtr htok = IntPtr.Zero;
            retVal = OpenProcessToken(hproc, TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, ref htok);
            tp.Count = 1;
            tp.Luid = 0;
            tp.Attr = SE_PRIVILEGE_ENABLED;
            retVal = LookupPrivilegeValue(null, privName, ref tp.Luid);
            retVal = AdjustTokenPrivileges(htok, false, ref tp, 0, IntPtr.Zero, IntPtr.Zero);
            return retVal;
        }
       
        public static bool checkUserPriv(IntPtr hToken, string privName)
        {
            bool res;
            LUID luid = new LUID();
            TokPriv1Luid tp;
            tp.Count = 1;
            tp.Luid = 0;
            tp.Attr = SE_PRIVILEGE_ENABLED;
            LookupPrivilegeValue(null, privName, ref tp.Luid);
            PRIVILEGE_SET privs = new PRIVILEGE_SET { Privilege = new LUID_AND_ATTRIBUTES[1], Control = PRIVILEGE_SET.PRIVILEGE_SET_ALL_NECESSARY, PrivilegeCount = 1 };
            privs.Privilege[0].Luid = luid;
            privs.Privilege[0].Attributes = LUID_AND_ATTRIBUTES.SE_PRIVILEGE_ENABLED;
            PrivilegeCheck(hToken, ref privs, out res);
            return res;
        }

        public static Dictionary<string, bool> getAllUserPrivs(IntPtr hToken)
        {
            Dictionary<string, bool> allPrivs = new Dictionary<string, bool>();
            Int32 TokenLength;
            bool ret;
            ret = GetTokenInformation(hToken, TOKEN_INFORMATION_CLASS.TokenPrivileges, IntPtr.Zero, 0, out TokenLength);
            IntPtr TokenInfo = Marshal.AllocHGlobal(TokenLength);
            ret = GetTokenInformation(hToken, TOKEN_INFORMATION_CLASS.TokenPrivileges, TokenInfo, TokenLength, out TokenLength);
            TOKEN_PRIVILEGES privs = (TOKEN_PRIVILEGES)Marshal.PtrToStructure(TokenInfo, typeof(TOKEN_PRIVILEGES));

            IntPtr startingPtr = new IntPtr(TokenInfo.ToInt64() + sizeof(uint));
            for (int i = 0; i < privs.PrivilegeCount; i++)
            {
                int size = Marshal.SizeOf(typeof(LUID_AND_ATTRIBUTES));
                IntPtr tempPtr = new IntPtr(startingPtr.ToInt64() + i * size);
                LUID_AND_ATTRIBUTES laa = (LUID_AND_ATTRIBUTES)Marshal.PtrToStructure(tempPtr, typeof(LUID_AND_ATTRIBUTES));
                int cchName = 100;
                System.Text.StringBuilder name = new System.Text.StringBuilder(100);
                IntPtr luidPtr = Marshal.AllocHGlobal(Marshal.SizeOf(laa.Luid));
                Marshal.StructureToPtr(laa.Luid, luidPtr, true);
                LookupPrivilegeName(null, luidPtr, name, ref cchName);
                allPrivs.Add(name.ToString(), checkUserPriv(hToken, name.ToString()));
                Marshal.FreeHGlobal(luidPtr);
            }
            Marshal.FreeHGlobal(TokenInfo);
            return allPrivs;
        }
    }
}
